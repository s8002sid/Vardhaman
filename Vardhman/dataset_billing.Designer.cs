//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Vardhman {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dataset_billing")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dataset_billing : global::System.Data.DataSet {
        
        private BilldetailDataTable tableBilldetail;
        
        private billmasterDataTable tablebillmaster;
        
        private ClosingbalanceDataTable tableClosingbalance;
        
        private Billdetail1DataTable tableBilldetail1;
        
        private Billdetail_RgDataTable tableBilldetail_Rg;
        
        private rgdetailDataTable tablergdetail;
        
        private cdDataTable tablecd;
        
        private global::System.Data.DataRelation relationbillmaster_Billingdetail;
        
        private global::System.Data.DataRelation relationbillmaster_Billdetail1;
        
        private global::System.Data.DataRelation relationbillmaster_Billdetail11;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dataset_billing() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dataset_billing(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Billdetail"] != null)) {
                    base.Tables.Add(new BilldetailDataTable(ds.Tables["Billdetail"]));
                }
                if ((ds.Tables["billmaster"] != null)) {
                    base.Tables.Add(new billmasterDataTable(ds.Tables["billmaster"]));
                }
                if ((ds.Tables["Closingbalance"] != null)) {
                    base.Tables.Add(new ClosingbalanceDataTable(ds.Tables["Closingbalance"]));
                }
                if ((ds.Tables["Billdetail1"] != null)) {
                    base.Tables.Add(new Billdetail1DataTable(ds.Tables["Billdetail1"]));
                }
                if ((ds.Tables["Billdetail_Rg"] != null)) {
                    base.Tables.Add(new Billdetail_RgDataTable(ds.Tables["Billdetail_Rg"]));
                }
                if ((ds.Tables["rgdetail"] != null)) {
                    base.Tables.Add(new rgdetailDataTable(ds.Tables["rgdetail"]));
                }
                if ((ds.Tables["cd"] != null)) {
                    base.Tables.Add(new cdDataTable(ds.Tables["cd"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BilldetailDataTable Billdetail {
            get {
                return this.tableBilldetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public billmasterDataTable billmaster {
            get {
                return this.tablebillmaster;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClosingbalanceDataTable Closingbalance {
            get {
                return this.tableClosingbalance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Billdetail1DataTable Billdetail1 {
            get {
                return this.tableBilldetail1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Billdetail_RgDataTable Billdetail_Rg {
            get {
                return this.tableBilldetail_Rg;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rgdetailDataTable rgdetail {
            get {
                return this.tablergdetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public cdDataTable cd {
            get {
                return this.tablecd;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dataset_billing cln = ((dataset_billing)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Billdetail"] != null)) {
                    base.Tables.Add(new BilldetailDataTable(ds.Tables["Billdetail"]));
                }
                if ((ds.Tables["billmaster"] != null)) {
                    base.Tables.Add(new billmasterDataTable(ds.Tables["billmaster"]));
                }
                if ((ds.Tables["Closingbalance"] != null)) {
                    base.Tables.Add(new ClosingbalanceDataTable(ds.Tables["Closingbalance"]));
                }
                if ((ds.Tables["Billdetail1"] != null)) {
                    base.Tables.Add(new Billdetail1DataTable(ds.Tables["Billdetail1"]));
                }
                if ((ds.Tables["Billdetail_Rg"] != null)) {
                    base.Tables.Add(new Billdetail_RgDataTable(ds.Tables["Billdetail_Rg"]));
                }
                if ((ds.Tables["rgdetail"] != null)) {
                    base.Tables.Add(new rgdetailDataTable(ds.Tables["rgdetail"]));
                }
                if ((ds.Tables["cd"] != null)) {
                    base.Tables.Add(new cdDataTable(ds.Tables["cd"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBilldetail = ((BilldetailDataTable)(base.Tables["Billdetail"]));
            if ((initTable == true)) {
                if ((this.tableBilldetail != null)) {
                    this.tableBilldetail.InitVars();
                }
            }
            this.tablebillmaster = ((billmasterDataTable)(base.Tables["billmaster"]));
            if ((initTable == true)) {
                if ((this.tablebillmaster != null)) {
                    this.tablebillmaster.InitVars();
                }
            }
            this.tableClosingbalance = ((ClosingbalanceDataTable)(base.Tables["Closingbalance"]));
            if ((initTable == true)) {
                if ((this.tableClosingbalance != null)) {
                    this.tableClosingbalance.InitVars();
                }
            }
            this.tableBilldetail1 = ((Billdetail1DataTable)(base.Tables["Billdetail1"]));
            if ((initTable == true)) {
                if ((this.tableBilldetail1 != null)) {
                    this.tableBilldetail1.InitVars();
                }
            }
            this.tableBilldetail_Rg = ((Billdetail_RgDataTable)(base.Tables["Billdetail_Rg"]));
            if ((initTable == true)) {
                if ((this.tableBilldetail_Rg != null)) {
                    this.tableBilldetail_Rg.InitVars();
                }
            }
            this.tablergdetail = ((rgdetailDataTable)(base.Tables["rgdetail"]));
            if ((initTable == true)) {
                if ((this.tablergdetail != null)) {
                    this.tablergdetail.InitVars();
                }
            }
            this.tablecd = ((cdDataTable)(base.Tables["cd"]));
            if ((initTable == true)) {
                if ((this.tablecd != null)) {
                    this.tablecd.InitVars();
                }
            }
            this.relationbillmaster_Billingdetail = this.Relations["billmaster_Billingdetail"];
            this.relationbillmaster_Billdetail1 = this.Relations["billmaster_Billdetail1"];
            this.relationbillmaster_Billdetail11 = this.Relations["billmaster_Billdetail11"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dataset_billing";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dataset_billing.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBilldetail = new BilldetailDataTable();
            base.Tables.Add(this.tableBilldetail);
            this.tablebillmaster = new billmasterDataTable();
            base.Tables.Add(this.tablebillmaster);
            this.tableClosingbalance = new ClosingbalanceDataTable();
            base.Tables.Add(this.tableClosingbalance);
            this.tableBilldetail1 = new Billdetail1DataTable();
            base.Tables.Add(this.tableBilldetail1);
            this.tableBilldetail_Rg = new Billdetail_RgDataTable();
            base.Tables.Add(this.tableBilldetail_Rg);
            this.tablergdetail = new rgdetailDataTable();
            base.Tables.Add(this.tablergdetail);
            this.tablecd = new cdDataTable();
            base.Tables.Add(this.tablecd);
            this.relationbillmaster_Billingdetail = new global::System.Data.DataRelation("billmaster_Billingdetail", new global::System.Data.DataColumn[] {
                        this.tablebillmaster.BillidColumn}, new global::System.Data.DataColumn[] {
                        this.tableBilldetail.BillidColumn}, false);
            this.Relations.Add(this.relationbillmaster_Billingdetail);
            this.relationbillmaster_Billdetail1 = new global::System.Data.DataRelation("billmaster_Billdetail1", new global::System.Data.DataColumn[] {
                        this.tablebillmaster.BillidColumn}, new global::System.Data.DataColumn[] {
                        this.tableBilldetail1.BillidColumn}, false);
            this.Relations.Add(this.relationbillmaster_Billdetail1);
            this.relationbillmaster_Billdetail11 = new global::System.Data.DataRelation("billmaster_Billdetail11", new global::System.Data.DataColumn[] {
                        this.tablebillmaster.BillidColumn}, new global::System.Data.DataColumn[] {
                        this.tableBilldetail_Rg.BillidColumn}, false);
            this.Relations.Add(this.relationbillmaster_Billdetail11);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBilldetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializebillmaster() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClosingbalance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBilldetail1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBilldetail_Rg() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializergdetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecd() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dataset_billing ds = new dataset_billing();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BilldetailRowChangeEventHandler(object sender, BilldetailRowChangeEvent e);
        
        public delegate void billmasterRowChangeEventHandler(object sender, billmasterRowChangeEvent e);
        
        public delegate void ClosingbalanceRowChangeEventHandler(object sender, ClosingbalanceRowChangeEvent e);
        
        public delegate void Billdetail1RowChangeEventHandler(object sender, Billdetail1RowChangeEvent e);
        
        public delegate void Billdetail_RgRowChangeEventHandler(object sender, Billdetail_RgRowChangeEvent e);
        
        public delegate void rgdetailRowChangeEventHandler(object sender, rgdetailRowChangeEvent e);
        
        public delegate void cdRowChangeEventHandler(object sender, cdRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BilldetailDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBillid;
            
            private global::System.Data.DataColumn columnCompany;
            
            private global::System.Data.DataColumn columnGroup;
            
            private global::System.Data.DataColumn columnItem;
            
            private global::System.Data.DataColumn columnMeterdetail;
            
            private global::System.Data.DataColumn columnQty;
            
            private global::System.Data.DataColumn columnMeter;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnamt;
            
            private global::System.Data.DataColumn columnisrg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BilldetailDataTable() {
                this.TableName = "Billdetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BilldetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BilldetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillidColumn {
                get {
                    return this.columnBillid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyColumn {
                get {
                    return this.columnCompany;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupColumn {
                get {
                    return this.columnGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemColumn {
                get {
                    return this.columnItem;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeterdetailColumn {
                get {
                    return this.columnMeterdetail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeterColumn {
                get {
                    return this.columnMeter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amtColumn {
                get {
                    return this.columnamt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isrgColumn {
                get {
                    return this.columnisrg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BilldetailRow this[int index] {
                get {
                    return ((BilldetailRow)(this.Rows[index]));
                }
            }
            
            public event BilldetailRowChangeEventHandler BilldetailRowChanging;
            
            public event BilldetailRowChangeEventHandler BilldetailRowChanged;
            
            public event BilldetailRowChangeEventHandler BilldetailRowDeleting;
            
            public event BilldetailRowChangeEventHandler BilldetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBilldetailRow(BilldetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BilldetailRow AddBilldetailRow(billmasterRow parentbillmasterRowBybillmaster_Billingdetail, string Company, string Group, string Item, string Meterdetail, string Qty, string Meter, string Rate, string amt, string isrg) {
                BilldetailRow rowBilldetailRow = ((BilldetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Company,
                        Group,
                        Item,
                        Meterdetail,
                        Qty,
                        Meter,
                        Rate,
                        amt,
                        isrg};
                if ((parentbillmasterRowBybillmaster_Billingdetail != null)) {
                    columnValuesArray[0] = parentbillmasterRowBybillmaster_Billingdetail[0];
                }
                rowBilldetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBilldetailRow);
                return rowBilldetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BilldetailDataTable cln = ((BilldetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BilldetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBillid = base.Columns["Billid"];
                this.columnCompany = base.Columns["Company"];
                this.columnGroup = base.Columns["Group"];
                this.columnItem = base.Columns["Item"];
                this.columnMeterdetail = base.Columns["Meterdetail"];
                this.columnQty = base.Columns["Qty"];
                this.columnMeter = base.Columns["Meter"];
                this.columnRate = base.Columns["Rate"];
                this.columnamt = base.Columns["amt"];
                this.columnisrg = base.Columns["isrg"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBillid = new global::System.Data.DataColumn("Billid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillid);
                this.columnCompany = new global::System.Data.DataColumn("Company", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompany);
                this.columnGroup = new global::System.Data.DataColumn("Group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroup);
                this.columnItem = new global::System.Data.DataColumn("Item", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnItem.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Item");
                this.columnItem.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ItemColumn");
                this.columnItem.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnItem");
                this.columnItem.ExtendedProperties.Add("Generator_UserColumnName", "Item");
                base.Columns.Add(this.columnItem);
                this.columnMeterdetail = new global::System.Data.DataColumn("Meterdetail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeterdetail);
                this.columnQty = new global::System.Data.DataColumn("Qty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQty);
                this.columnMeter = new global::System.Data.DataColumn("Meter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeter);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnamt = new global::System.Data.DataColumn("amt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamt);
                this.columnisrg = new global::System.Data.DataColumn("isrg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisrg);
                this.columnBillid.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BilldetailRow NewBilldetailRow() {
                return ((BilldetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BilldetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BilldetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BilldetailRowChanged != null)) {
                    this.BilldetailRowChanged(this, new BilldetailRowChangeEvent(((BilldetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BilldetailRowChanging != null)) {
                    this.BilldetailRowChanging(this, new BilldetailRowChangeEvent(((BilldetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BilldetailRowDeleted != null)) {
                    this.BilldetailRowDeleted(this, new BilldetailRowChangeEvent(((BilldetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BilldetailRowDeleting != null)) {
                    this.BilldetailRowDeleting(this, new BilldetailRowChangeEvent(((BilldetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBilldetailRow(BilldetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dataset_billing ds = new dataset_billing();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BilldetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class billmasterDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBillid;
            
            private global::System.Data.DataColumn columnbillno;
            
            private global::System.Data.DataColumn columncustomer;
            
            private global::System.Data.DataColumn columncity;
            
            private global::System.Data.DataColumn columndate;
            
            private global::System.Data.DataColumn columntotal;
            
            private global::System.Data.DataColumn columnexpenseper;
            
            private global::System.Data.DataColumn columnexpenses;
            
            private global::System.Data.DataColumn columntransport;
            
            private global::System.Data.DataColumn columntransportcharge;
            
            private global::System.Data.DataColumn columntransportnumber;
            
            private global::System.Data.DataColumn columngrandtotal;
            
            private global::System.Data.DataColumn columnthrough;
            
            private global::System.Data.DataColumn columnpaymenttype;
            
            private global::System.Data.DataColumn columnnote;
            
            private global::System.Data.DataColumn columnRG_Total;
            
            private global::System.Data.DataColumn columniscd;
            
            private global::System.Data.DataColumn columncdexp;
            
            private global::System.Data.DataColumn columnvatper;
            
            private global::System.Data.DataColumn columnvat;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public billmasterDataTable() {
                this.TableName = "billmaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal billmasterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected billmasterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillidColumn {
                get {
                    return this.columnBillid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn billnoColumn {
                get {
                    return this.columnbillno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn customerColumn {
                get {
                    return this.columncustomer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cityColumn {
                get {
                    return this.columncity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn expenseperColumn {
                get {
                    return this.columnexpenseper;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn expensesColumn {
                get {
                    return this.columnexpenses;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transportColumn {
                get {
                    return this.columntransport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transportchargeColumn {
                get {
                    return this.columntransportcharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transportnumberColumn {
                get {
                    return this.columntransportnumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn grandtotalColumn {
                get {
                    return this.columngrandtotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn throughColumn {
                get {
                    return this.columnthrough;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn paymenttypeColumn {
                get {
                    return this.columnpaymenttype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noteColumn {
                get {
                    return this.columnnote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RG_TotalColumn {
                get {
                    return this.columnRG_Total;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iscdColumn {
                get {
                    return this.columniscd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cdexpColumn {
                get {
                    return this.columncdexp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn vatperColumn {
                get {
                    return this.columnvatper;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn vatColumn {
                get {
                    return this.columnvat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public billmasterRow this[int index] {
                get {
                    return ((billmasterRow)(this.Rows[index]));
                }
            }
            
            public event billmasterRowChangeEventHandler billmasterRowChanging;
            
            public event billmasterRowChangeEventHandler billmasterRowChanged;
            
            public event billmasterRowChangeEventHandler billmasterRowDeleting;
            
            public event billmasterRowChangeEventHandler billmasterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddbillmasterRow(billmasterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public billmasterRow AddbillmasterRow(
                        string Billid, 
                        string billno, 
                        string customer, 
                        string city, 
                        string date, 
                        double total, 
                        string expenseper, 
                        double expenses, 
                        string transport, 
                        double transportcharge, 
                        string transportnumber, 
                        double grandtotal, 
                        string through, 
                        string paymenttype, 
                        string note, 
                        double RG_Total, 
                        string iscd, 
                        string cdexp, 
                        string vatper, 
                        double vat) {
                billmasterRow rowbillmasterRow = ((billmasterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Billid,
                        billno,
                        customer,
                        city,
                        date,
                        total,
                        expenseper,
                        expenses,
                        transport,
                        transportcharge,
                        transportnumber,
                        grandtotal,
                        through,
                        paymenttype,
                        note,
                        RG_Total,
                        iscd,
                        cdexp,
                        vatper,
                        vat};
                rowbillmasterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowbillmasterRow);
                return rowbillmasterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public billmasterRow FindByBillid(string Billid) {
                return ((billmasterRow)(this.Rows.Find(new object[] {
                            Billid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                billmasterDataTable cln = ((billmasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new billmasterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBillid = base.Columns["Billid"];
                this.columnbillno = base.Columns["billno"];
                this.columncustomer = base.Columns["customer"];
                this.columncity = base.Columns["city"];
                this.columndate = base.Columns["date"];
                this.columntotal = base.Columns["total"];
                this.columnexpenseper = base.Columns["expenseper"];
                this.columnexpenses = base.Columns["expenses"];
                this.columntransport = base.Columns["transport"];
                this.columntransportcharge = base.Columns["transportcharge"];
                this.columntransportnumber = base.Columns["transportnumber"];
                this.columngrandtotal = base.Columns["grandtotal"];
                this.columnthrough = base.Columns["through"];
                this.columnpaymenttype = base.Columns["paymenttype"];
                this.columnnote = base.Columns["note"];
                this.columnRG_Total = base.Columns["RG Total"];
                this.columniscd = base.Columns["iscd"];
                this.columncdexp = base.Columns["cdexp"];
                this.columnvatper = base.Columns["vatper"];
                this.columnvat = base.Columns["vat"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBillid = new global::System.Data.DataColumn("Billid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillid);
                this.columnbillno = new global::System.Data.DataColumn("billno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbillno);
                this.columncustomer = new global::System.Data.DataColumn("customer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncustomer);
                this.columncity = new global::System.Data.DataColumn("city", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncity);
                this.columndate = new global::System.Data.DataColumn("date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnexpenseper = new global::System.Data.DataColumn("expenseper", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexpenseper);
                this.columnexpenses = new global::System.Data.DataColumn("expenses", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexpenses);
                this.columntransport = new global::System.Data.DataColumn("transport", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransport);
                this.columntransportcharge = new global::System.Data.DataColumn("transportcharge", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransportcharge);
                this.columntransportnumber = new global::System.Data.DataColumn("transportnumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransportnumber);
                this.columngrandtotal = new global::System.Data.DataColumn("grandtotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrandtotal);
                this.columnthrough = new global::System.Data.DataColumn("through", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnthrough);
                this.columnpaymenttype = new global::System.Data.DataColumn("paymenttype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpaymenttype);
                this.columnnote = new global::System.Data.DataColumn("note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnote);
                this.columnRG_Total = new global::System.Data.DataColumn("RG Total", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRG_Total);
                this.columniscd = new global::System.Data.DataColumn("iscd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniscd);
                this.columncdexp = new global::System.Data.DataColumn("cdexp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncdexp);
                this.columnvatper = new global::System.Data.DataColumn("vatper", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvatper);
                this.columnvat = new global::System.Data.DataColumn("vat", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvat);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("billmasterKey1", new global::System.Data.DataColumn[] {
                                this.columnBillid}, true));
                this.columnBillid.AllowDBNull = false;
                this.columnBillid.Unique = true;
                this.columnvatper.Caption = "expenseper";
                this.columnvat.Caption = "expenses";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public billmasterRow NewbillmasterRow() {
                return ((billmasterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new billmasterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(billmasterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.billmasterRowChanged != null)) {
                    this.billmasterRowChanged(this, new billmasterRowChangeEvent(((billmasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.billmasterRowChanging != null)) {
                    this.billmasterRowChanging(this, new billmasterRowChangeEvent(((billmasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.billmasterRowDeleted != null)) {
                    this.billmasterRowDeleted(this, new billmasterRowChangeEvent(((billmasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.billmasterRowDeleting != null)) {
                    this.billmasterRowDeleting(this, new billmasterRowChangeEvent(((billmasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovebillmasterRow(billmasterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dataset_billing ds = new dataset_billing();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "billmasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClosingbalanceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBalance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClosingbalanceDataTable() {
                this.TableName = "Closingbalance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClosingbalanceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClosingbalanceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceColumn {
                get {
                    return this.columnBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClosingbalanceRow this[int index] {
                get {
                    return ((ClosingbalanceRow)(this.Rows[index]));
                }
            }
            
            public event ClosingbalanceRowChangeEventHandler ClosingbalanceRowChanging;
            
            public event ClosingbalanceRowChangeEventHandler ClosingbalanceRowChanged;
            
            public event ClosingbalanceRowChangeEventHandler ClosingbalanceRowDeleting;
            
            public event ClosingbalanceRowChangeEventHandler ClosingbalanceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClosingbalanceRow(ClosingbalanceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClosingbalanceRow AddClosingbalanceRow(string Balance) {
                ClosingbalanceRow rowClosingbalanceRow = ((ClosingbalanceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Balance};
                rowClosingbalanceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClosingbalanceRow);
                return rowClosingbalanceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClosingbalanceDataTable cln = ((ClosingbalanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClosingbalanceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBalance = base.Columns["Balance"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBalance = new global::System.Data.DataColumn("Balance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalance);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClosingbalanceRow NewClosingbalanceRow() {
                return ((ClosingbalanceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClosingbalanceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClosingbalanceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClosingbalanceRowChanged != null)) {
                    this.ClosingbalanceRowChanged(this, new ClosingbalanceRowChangeEvent(((ClosingbalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClosingbalanceRowChanging != null)) {
                    this.ClosingbalanceRowChanging(this, new ClosingbalanceRowChangeEvent(((ClosingbalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClosingbalanceRowDeleted != null)) {
                    this.ClosingbalanceRowDeleted(this, new ClosingbalanceRowChangeEvent(((ClosingbalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClosingbalanceRowDeleting != null)) {
                    this.ClosingbalanceRowDeleting(this, new ClosingbalanceRowChangeEvent(((ClosingbalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClosingbalanceRow(ClosingbalanceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dataset_billing ds = new dataset_billing();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClosingbalanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Billdetail1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBillid;
            
            private global::System.Data.DataColumn columnGroup;
            
            private global::System.Data.DataColumn columnItem;
            
            private global::System.Data.DataColumn columnQty;
            
            private global::System.Data.DataColumn columnMeter;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnamt;
            
            private global::System.Data.DataColumn columnisrg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail1DataTable() {
                this.TableName = "Billdetail1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Billdetail1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Billdetail1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillidColumn {
                get {
                    return this.columnBillid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupColumn {
                get {
                    return this.columnGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemColumn {
                get {
                    return this.columnItem;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeterColumn {
                get {
                    return this.columnMeter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amtColumn {
                get {
                    return this.columnamt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isrgColumn {
                get {
                    return this.columnisrg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail1Row this[int index] {
                get {
                    return ((Billdetail1Row)(this.Rows[index]));
                }
            }
            
            public event Billdetail1RowChangeEventHandler Billdetail1RowChanging;
            
            public event Billdetail1RowChangeEventHandler Billdetail1RowChanged;
            
            public event Billdetail1RowChangeEventHandler Billdetail1RowDeleting;
            
            public event Billdetail1RowChangeEventHandler Billdetail1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBilldetail1Row(Billdetail1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail1Row AddBilldetail1Row(billmasterRow parentbillmasterRowBybillmaster_Billdetail1, string Group, string Item, int Qty, string Meter, double Rate, string amt, byte isrg) {
                Billdetail1Row rowBilldetail1Row = ((Billdetail1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Group,
                        Item,
                        Qty,
                        Meter,
                        Rate,
                        amt,
                        isrg};
                if ((parentbillmasterRowBybillmaster_Billdetail1 != null)) {
                    columnValuesArray[0] = parentbillmasterRowBybillmaster_Billdetail1[0];
                }
                rowBilldetail1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowBilldetail1Row);
                return rowBilldetail1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Billdetail1DataTable cln = ((Billdetail1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Billdetail1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBillid = base.Columns["Billid"];
                this.columnGroup = base.Columns["Group"];
                this.columnItem = base.Columns["Item"];
                this.columnQty = base.Columns["Qty"];
                this.columnMeter = base.Columns["Meter"];
                this.columnRate = base.Columns["Rate"];
                this.columnamt = base.Columns["amt"];
                this.columnisrg = base.Columns["isrg"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBillid = new global::System.Data.DataColumn("Billid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillid);
                this.columnGroup = new global::System.Data.DataColumn("Group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroup);
                this.columnItem = new global::System.Data.DataColumn("Item", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnItem.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Item");
                this.columnItem.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ItemColumn");
                this.columnItem.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnItem");
                this.columnItem.ExtendedProperties.Add("Generator_UserColumnName", "Item");
                base.Columns.Add(this.columnItem);
                this.columnQty = new global::System.Data.DataColumn("Qty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQty);
                this.columnMeter = new global::System.Data.DataColumn("Meter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeter);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnamt = new global::System.Data.DataColumn("amt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamt);
                this.columnisrg = new global::System.Data.DataColumn("isrg", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisrg);
                this.columnBillid.AllowDBNull = false;
                this.columnItem.Caption = "Company";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail1Row NewBilldetail1Row() {
                return ((Billdetail1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Billdetail1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Billdetail1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Billdetail1RowChanged != null)) {
                    this.Billdetail1RowChanged(this, new Billdetail1RowChangeEvent(((Billdetail1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Billdetail1RowChanging != null)) {
                    this.Billdetail1RowChanging(this, new Billdetail1RowChangeEvent(((Billdetail1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Billdetail1RowDeleted != null)) {
                    this.Billdetail1RowDeleted(this, new Billdetail1RowChangeEvent(((Billdetail1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Billdetail1RowDeleting != null)) {
                    this.Billdetail1RowDeleting(this, new Billdetail1RowChangeEvent(((Billdetail1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBilldetail1Row(Billdetail1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dataset_billing ds = new dataset_billing();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Billdetail1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Billdetail_RgDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBillid;
            
            private global::System.Data.DataColumn columnGroup;
            
            private global::System.Data.DataColumn columnItem;
            
            private global::System.Data.DataColumn columnQty;
            
            private global::System.Data.DataColumn columnMeter;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnamt;
            
            private global::System.Data.DataColumn columnisrg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail_RgDataTable() {
                this.TableName = "Billdetail_Rg";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Billdetail_RgDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Billdetail_RgDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillidColumn {
                get {
                    return this.columnBillid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupColumn {
                get {
                    return this.columnGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemColumn {
                get {
                    return this.columnItem;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeterColumn {
                get {
                    return this.columnMeter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amtColumn {
                get {
                    return this.columnamt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isrgColumn {
                get {
                    return this.columnisrg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail_RgRow this[int index] {
                get {
                    return ((Billdetail_RgRow)(this.Rows[index]));
                }
            }
            
            public event Billdetail_RgRowChangeEventHandler Billdetail_RgRowChanging;
            
            public event Billdetail_RgRowChangeEventHandler Billdetail_RgRowChanged;
            
            public event Billdetail_RgRowChangeEventHandler Billdetail_RgRowDeleting;
            
            public event Billdetail_RgRowChangeEventHandler Billdetail_RgRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBilldetail_RgRow(Billdetail_RgRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail_RgRow AddBilldetail_RgRow(billmasterRow parentbillmasterRowBybillmaster_Billdetail11, string Group, string Item, int Qty, string Meter, string Rate, string amt, string isrg) {
                Billdetail_RgRow rowBilldetail_RgRow = ((Billdetail_RgRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Group,
                        Item,
                        Qty,
                        Meter,
                        Rate,
                        amt,
                        isrg};
                if ((parentbillmasterRowBybillmaster_Billdetail11 != null)) {
                    columnValuesArray[0] = parentbillmasterRowBybillmaster_Billdetail11[0];
                }
                rowBilldetail_RgRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBilldetail_RgRow);
                return rowBilldetail_RgRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Billdetail_RgDataTable cln = ((Billdetail_RgDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Billdetail_RgDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBillid = base.Columns["Billid"];
                this.columnGroup = base.Columns["Group"];
                this.columnItem = base.Columns["Item"];
                this.columnQty = base.Columns["Qty"];
                this.columnMeter = base.Columns["Meter"];
                this.columnRate = base.Columns["Rate"];
                this.columnamt = base.Columns["amt"];
                this.columnisrg = base.Columns["isrg"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBillid = new global::System.Data.DataColumn("Billid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillid);
                this.columnGroup = new global::System.Data.DataColumn("Group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroup);
                this.columnItem = new global::System.Data.DataColumn("Item", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnItem.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Item");
                this.columnItem.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ItemColumn");
                this.columnItem.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnItem");
                this.columnItem.ExtendedProperties.Add("Generator_UserColumnName", "Item");
                base.Columns.Add(this.columnItem);
                this.columnQty = new global::System.Data.DataColumn("Qty", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQty);
                this.columnMeter = new global::System.Data.DataColumn("Meter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeter);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnamt = new global::System.Data.DataColumn("amt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamt);
                this.columnisrg = new global::System.Data.DataColumn("isrg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisrg);
                this.columnBillid.AllowDBNull = false;
                this.columnItem.Caption = "Company";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail_RgRow NewBilldetail_RgRow() {
                return ((Billdetail_RgRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Billdetail_RgRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Billdetail_RgRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Billdetail_RgRowChanged != null)) {
                    this.Billdetail_RgRowChanged(this, new Billdetail_RgRowChangeEvent(((Billdetail_RgRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Billdetail_RgRowChanging != null)) {
                    this.Billdetail_RgRowChanging(this, new Billdetail_RgRowChangeEvent(((Billdetail_RgRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Billdetail_RgRowDeleted != null)) {
                    this.Billdetail_RgRowDeleted(this, new Billdetail_RgRowChangeEvent(((Billdetail_RgRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Billdetail_RgRowDeleting != null)) {
                    this.Billdetail_RgRowDeleting(this, new Billdetail_RgRowChangeEvent(((Billdetail_RgRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBilldetail_RgRow(Billdetail_RgRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dataset_billing ds = new dataset_billing();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Billdetail_RgDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class rgdetailDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnisrg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rgdetailDataTable() {
                this.TableName = "rgdetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rgdetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected rgdetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isrgColumn {
                get {
                    return this.columnisrg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rgdetailRow this[int index] {
                get {
                    return ((rgdetailRow)(this.Rows[index]));
                }
            }
            
            public event rgdetailRowChangeEventHandler rgdetailRowChanging;
            
            public event rgdetailRowChangeEventHandler rgdetailRowChanged;
            
            public event rgdetailRowChangeEventHandler rgdetailRowDeleting;
            
            public event rgdetailRowChangeEventHandler rgdetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrgdetailRow(rgdetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rgdetailRow AddrgdetailRow(int isrg) {
                rgdetailRow rowrgdetailRow = ((rgdetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        isrg};
                rowrgdetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrgdetailRow);
                return rowrgdetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                rgdetailDataTable cln = ((rgdetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new rgdetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnisrg = base.Columns["isrg"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnisrg = new global::System.Data.DataColumn("isrg", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisrg);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rgdetailRow NewrgdetailRow() {
                return ((rgdetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new rgdetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(rgdetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rgdetailRowChanged != null)) {
                    this.rgdetailRowChanged(this, new rgdetailRowChangeEvent(((rgdetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rgdetailRowChanging != null)) {
                    this.rgdetailRowChanging(this, new rgdetailRowChangeEvent(((rgdetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rgdetailRowDeleted != null)) {
                    this.rgdetailRowDeleted(this, new rgdetailRowChangeEvent(((rgdetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rgdetailRowDeleting != null)) {
                    this.rgdetailRowDeleting(this, new rgdetailRowChangeEvent(((rgdetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovergdetailRow(rgdetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dataset_billing ds = new dataset_billing();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "rgdetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class cdDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columniscd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cdDataTable() {
                this.TableName = "cd";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected cdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iscdColumn {
                get {
                    return this.columniscd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cdRow this[int index] {
                get {
                    return ((cdRow)(this.Rows[index]));
                }
            }
            
            public event cdRowChangeEventHandler cdRowChanging;
            
            public event cdRowChangeEventHandler cdRowChanged;
            
            public event cdRowChangeEventHandler cdRowDeleting;
            
            public event cdRowChangeEventHandler cdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcdRow(cdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cdRow AddcdRow(string iscd) {
                cdRow rowcdRow = ((cdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        iscd};
                rowcdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcdRow);
                return rowcdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                cdDataTable cln = ((cdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new cdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columniscd = base.Columns["iscd"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columniscd = new global::System.Data.DataColumn("iscd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniscd);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cdRow NewcdRow() {
                return ((cdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new cdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(cdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.cdRowChanged != null)) {
                    this.cdRowChanged(this, new cdRowChangeEvent(((cdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.cdRowChanging != null)) {
                    this.cdRowChanging(this, new cdRowChangeEvent(((cdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.cdRowDeleted != null)) {
                    this.cdRowDeleted(this, new cdRowChangeEvent(((cdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.cdRowDeleting != null)) {
                    this.cdRowDeleting(this, new cdRowChangeEvent(((cdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecdRow(cdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dataset_billing ds = new dataset_billing();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "cdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BilldetailRow : global::System.Data.DataRow {
            
            private BilldetailDataTable tableBilldetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BilldetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBilldetail = ((BilldetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Billid {
                get {
                    return ((string)(this[this.tableBilldetail.BillidColumn]));
                }
                set {
                    this[this.tableBilldetail.BillidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Company {
                get {
                    if (this.IsCompanyNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableBilldetail.CompanyColumn]));
                    }
                }
                set {
                    this[this.tableBilldetail.CompanyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Group {
                get {
                    if (this.IsGroupNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableBilldetail.GroupColumn]));
                    }
                }
                set {
                    this[this.tableBilldetail.GroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Item {
                get {
                    if (this.IsItemNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableBilldetail.ItemColumn]));
                    }
                }
                set {
                    this[this.tableBilldetail.ItemColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Meterdetail {
                get {
                    if (this.IsMeterdetailNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableBilldetail.MeterdetailColumn]));
                    }
                }
                set {
                    this[this.tableBilldetail.MeterdetailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Qty {
                get {
                    if (this.IsQtyNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableBilldetail.QtyColumn]));
                    }
                }
                set {
                    this[this.tableBilldetail.QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Meter {
                get {
                    if (this.IsMeterNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableBilldetail.MeterColumn]));
                    }
                }
                set {
                    this[this.tableBilldetail.MeterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rate {
                get {
                    if (this.IsRateNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableBilldetail.RateColumn]));
                    }
                }
                set {
                    this[this.tableBilldetail.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string amt {
                get {
                    if (this.IsamtNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableBilldetail.amtColumn]));
                    }
                }
                set {
                    this[this.tableBilldetail.amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string isrg {
                get {
                    if (this.IsisrgNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableBilldetail.isrgColumn]));
                    }
                }
                set {
                    this[this.tableBilldetail.isrgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public billmasterRow billmasterRow {
                get {
                    return ((billmasterRow)(this.GetParentRow(this.Table.ParentRelations["billmaster_Billingdetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["billmaster_Billingdetail"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNull() {
                return this.IsNull(this.tableBilldetail.CompanyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNull() {
                this[this.tableBilldetail.CompanyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupNull() {
                return this.IsNull(this.tableBilldetail.GroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupNull() {
                this[this.tableBilldetail.GroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNull() {
                return this.IsNull(this.tableBilldetail.ItemColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNull() {
                this[this.tableBilldetail.ItemColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeterdetailNull() {
                return this.IsNull(this.tableBilldetail.MeterdetailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeterdetailNull() {
                this[this.tableBilldetail.MeterdetailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQtyNull() {
                return this.IsNull(this.tableBilldetail.QtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQtyNull() {
                this[this.tableBilldetail.QtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeterNull() {
                return this.IsNull(this.tableBilldetail.MeterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeterNull() {
                this[this.tableBilldetail.MeterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableBilldetail.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableBilldetail.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamtNull() {
                return this.IsNull(this.tableBilldetail.amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamtNull() {
                this[this.tableBilldetail.amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisrgNull() {
                return this.IsNull(this.tableBilldetail.isrgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisrgNull() {
                this[this.tableBilldetail.isrgColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class billmasterRow : global::System.Data.DataRow {
            
            private billmasterDataTable tablebillmaster;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal billmasterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablebillmaster = ((billmasterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Billid {
                get {
                    return ((string)(this[this.tablebillmaster.BillidColumn]));
                }
                set {
                    this[this.tablebillmaster.BillidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string billno {
                get {
                    if (this.IsbillnoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablebillmaster.billnoColumn]));
                    }
                }
                set {
                    this[this.tablebillmaster.billnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string customer {
                get {
                    if (this.IscustomerNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablebillmaster.customerColumn]));
                    }
                }
                set {
                    this[this.tablebillmaster.customerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string city {
                get {
                    if (this.IscityNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablebillmaster.cityColumn]));
                    }
                }
                set {
                    this[this.tablebillmaster.cityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date {
                get {
                    if (this.IsdateNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablebillmaster.dateColumn]));
                    }
                }
                set {
                    this[this.tablebillmaster.dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double total {
                get {
                    try {
                        return ((double)(this[this.tablebillmaster.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'billmaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebillmaster.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string expenseper {
                get {
                    try {
                        return ((string)(this[this.tablebillmaster.expenseperColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'expenseper\' in table \'billmaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebillmaster.expenseperColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double expenses {
                get {
                    try {
                        return ((double)(this[this.tablebillmaster.expensesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'expenses\' in table \'billmaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebillmaster.expensesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string transport {
                get {
                    if (this.IstransportNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablebillmaster.transportColumn]));
                    }
                }
                set {
                    this[this.tablebillmaster.transportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double transportcharge {
                get {
                    try {
                        return ((double)(this[this.tablebillmaster.transportchargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'transportcharge\' in table \'billmaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebillmaster.transportchargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string transportnumber {
                get {
                    if (this.IstransportnumberNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablebillmaster.transportnumberColumn]));
                    }
                }
                set {
                    this[this.tablebillmaster.transportnumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double grandtotal {
                get {
                    try {
                        return ((double)(this[this.tablebillmaster.grandtotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'grandtotal\' in table \'billmaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebillmaster.grandtotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string through {
                get {
                    if (this.IsthroughNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablebillmaster.throughColumn]));
                    }
                }
                set {
                    this[this.tablebillmaster.throughColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string paymenttype {
                get {
                    if (this.IspaymenttypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablebillmaster.paymenttypeColumn]));
                    }
                }
                set {
                    this[this.tablebillmaster.paymenttypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string note {
                get {
                    try {
                        return ((string)(this[this.tablebillmaster.noteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'note\' in table \'billmaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebillmaster.noteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RG_Total {
                get {
                    try {
                        return ((double)(this[this.tablebillmaster.RG_TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RG Total\' in table \'billmaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebillmaster.RG_TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string iscd {
                get {
                    try {
                        return ((string)(this[this.tablebillmaster.iscdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'iscd\' in table \'billmaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebillmaster.iscdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cdexp {
                get {
                    try {
                        return ((string)(this[this.tablebillmaster.cdexpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cdexp\' in table \'billmaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebillmaster.cdexpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string vatper {
                get {
                    try {
                        return ((string)(this[this.tablebillmaster.vatperColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'vatper\' in table \'billmaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebillmaster.vatperColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double vat {
                get {
                    try {
                        return ((double)(this[this.tablebillmaster.vatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'vat\' in table \'billmaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebillmaster.vatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbillnoNull() {
                return this.IsNull(this.tablebillmaster.billnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbillnoNull() {
                this[this.tablebillmaster.billnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscustomerNull() {
                return this.IsNull(this.tablebillmaster.customerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcustomerNull() {
                this[this.tablebillmaster.customerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscityNull() {
                return this.IsNull(this.tablebillmaster.cityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcityNull() {
                this[this.tablebillmaster.cityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateNull() {
                return this.IsNull(this.tablebillmaster.dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateNull() {
                this[this.tablebillmaster.dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tablebillmaster.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tablebillmaster.totalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexpenseperNull() {
                return this.IsNull(this.tablebillmaster.expenseperColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexpenseperNull() {
                this[this.tablebillmaster.expenseperColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexpensesNull() {
                return this.IsNull(this.tablebillmaster.expensesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexpensesNull() {
                this[this.tablebillmaster.expensesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransportNull() {
                return this.IsNull(this.tablebillmaster.transportColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransportNull() {
                this[this.tablebillmaster.transportColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransportchargeNull() {
                return this.IsNull(this.tablebillmaster.transportchargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransportchargeNull() {
                this[this.tablebillmaster.transportchargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransportnumberNull() {
                return this.IsNull(this.tablebillmaster.transportnumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransportnumberNull() {
                this[this.tablebillmaster.transportnumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgrandtotalNull() {
                return this.IsNull(this.tablebillmaster.grandtotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgrandtotalNull() {
                this[this.tablebillmaster.grandtotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsthroughNull() {
                return this.IsNull(this.tablebillmaster.throughColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetthroughNull() {
                this[this.tablebillmaster.throughColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspaymenttypeNull() {
                return this.IsNull(this.tablebillmaster.paymenttypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpaymenttypeNull() {
                this[this.tablebillmaster.paymenttypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoteNull() {
                return this.IsNull(this.tablebillmaster.noteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoteNull() {
                this[this.tablebillmaster.noteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRG_TotalNull() {
                return this.IsNull(this.tablebillmaster.RG_TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRG_TotalNull() {
                this[this.tablebillmaster.RG_TotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiscdNull() {
                return this.IsNull(this.tablebillmaster.iscdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiscdNull() {
                this[this.tablebillmaster.iscdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscdexpNull() {
                return this.IsNull(this.tablebillmaster.cdexpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcdexpNull() {
                this[this.tablebillmaster.cdexpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvatperNull() {
                return this.IsNull(this.tablebillmaster.vatperColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvatperNull() {
                this[this.tablebillmaster.vatperColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvatNull() {
                return this.IsNull(this.tablebillmaster.vatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvatNull() {
                this[this.tablebillmaster.vatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BilldetailRow[] GetBillingdetailRows() {
                if ((this.Table.ChildRelations["billmaster_Billingdetail"] == null)) {
                    return new BilldetailRow[0];
                }
                else {
                    return ((BilldetailRow[])(base.GetChildRows(this.Table.ChildRelations["billmaster_Billingdetail"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail1Row[] GetBilldetail1Rows() {
                if ((this.Table.ChildRelations["billmaster_Billdetail1"] == null)) {
                    return new Billdetail1Row[0];
                }
                else {
                    return ((Billdetail1Row[])(base.GetChildRows(this.Table.ChildRelations["billmaster_Billdetail1"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail_RgRow[] GetBilldetail_RgRows() {
                if ((this.Table.ChildRelations["billmaster_Billdetail11"] == null)) {
                    return new Billdetail_RgRow[0];
                }
                else {
                    return ((Billdetail_RgRow[])(base.GetChildRows(this.Table.ChildRelations["billmaster_Billdetail11"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClosingbalanceRow : global::System.Data.DataRow {
            
            private ClosingbalanceDataTable tableClosingbalance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClosingbalanceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClosingbalance = ((ClosingbalanceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Balance {
                get {
                    if (this.IsBalanceNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableClosingbalance.BalanceColumn]));
                    }
                }
                set {
                    this[this.tableClosingbalance.BalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceNull() {
                return this.IsNull(this.tableClosingbalance.BalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceNull() {
                this[this.tableClosingbalance.BalanceColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Billdetail1Row : global::System.Data.DataRow {
            
            private Billdetail1DataTable tableBilldetail1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Billdetail1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBilldetail1 = ((Billdetail1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Billid {
                get {
                    return ((string)(this[this.tableBilldetail1.BillidColumn]));
                }
                set {
                    this[this.tableBilldetail1.BillidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Group {
                get {
                    try {
                        return ((string)(this[this.tableBilldetail1.GroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Group\' in table \'Billdetail1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail1.GroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Item {
                get {
                    try {
                        return ((string)(this[this.tableBilldetail1.ItemColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Item\' in table \'Billdetail1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail1.ItemColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Qty {
                get {
                    try {
                        return ((int)(this[this.tableBilldetail1.QtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Qty\' in table \'Billdetail1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail1.QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Meter {
                get {
                    try {
                        return ((string)(this[this.tableBilldetail1.MeterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Meter\' in table \'Billdetail1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail1.MeterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Rate {
                get {
                    try {
                        return ((double)(this[this.tableBilldetail1.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'Billdetail1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail1.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string amt {
                get {
                    try {
                        return ((string)(this[this.tableBilldetail1.amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amt\' in table \'Billdetail1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail1.amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte isrg {
                get {
                    try {
                        return ((byte)(this[this.tableBilldetail1.isrgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isrg\' in table \'Billdetail1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail1.isrgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public billmasterRow billmasterRow {
                get {
                    return ((billmasterRow)(this.GetParentRow(this.Table.ParentRelations["billmaster_Billdetail1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["billmaster_Billdetail1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupNull() {
                return this.IsNull(this.tableBilldetail1.GroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupNull() {
                this[this.tableBilldetail1.GroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNull() {
                return this.IsNull(this.tableBilldetail1.ItemColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNull() {
                this[this.tableBilldetail1.ItemColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQtyNull() {
                return this.IsNull(this.tableBilldetail1.QtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQtyNull() {
                this[this.tableBilldetail1.QtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeterNull() {
                return this.IsNull(this.tableBilldetail1.MeterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeterNull() {
                this[this.tableBilldetail1.MeterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableBilldetail1.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableBilldetail1.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamtNull() {
                return this.IsNull(this.tableBilldetail1.amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamtNull() {
                this[this.tableBilldetail1.amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisrgNull() {
                return this.IsNull(this.tableBilldetail1.isrgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisrgNull() {
                this[this.tableBilldetail1.isrgColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Billdetail_RgRow : global::System.Data.DataRow {
            
            private Billdetail_RgDataTable tableBilldetail_Rg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Billdetail_RgRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBilldetail_Rg = ((Billdetail_RgDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Billid {
                get {
                    return ((string)(this[this.tableBilldetail_Rg.BillidColumn]));
                }
                set {
                    this[this.tableBilldetail_Rg.BillidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Group {
                get {
                    try {
                        return ((string)(this[this.tableBilldetail_Rg.GroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Group\' in table \'Billdetail_Rg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail_Rg.GroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Item {
                get {
                    try {
                        return ((string)(this[this.tableBilldetail_Rg.ItemColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Item\' in table \'Billdetail_Rg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail_Rg.ItemColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Qty {
                get {
                    try {
                        return ((int)(this[this.tableBilldetail_Rg.QtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Qty\' in table \'Billdetail_Rg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail_Rg.QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Meter {
                get {
                    try {
                        return ((string)(this[this.tableBilldetail_Rg.MeterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Meter\' in table \'Billdetail_Rg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail_Rg.MeterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rate {
                get {
                    try {
                        return ((string)(this[this.tableBilldetail_Rg.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'Billdetail_Rg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail_Rg.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string amt {
                get {
                    try {
                        return ((string)(this[this.tableBilldetail_Rg.amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amt\' in table \'Billdetail_Rg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail_Rg.amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string isrg {
                get {
                    try {
                        return ((string)(this[this.tableBilldetail_Rg.isrgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isrg\' in table \'Billdetail_Rg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBilldetail_Rg.isrgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public billmasterRow billmasterRow {
                get {
                    return ((billmasterRow)(this.GetParentRow(this.Table.ParentRelations["billmaster_Billdetail11"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["billmaster_Billdetail11"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupNull() {
                return this.IsNull(this.tableBilldetail_Rg.GroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupNull() {
                this[this.tableBilldetail_Rg.GroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNull() {
                return this.IsNull(this.tableBilldetail_Rg.ItemColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNull() {
                this[this.tableBilldetail_Rg.ItemColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQtyNull() {
                return this.IsNull(this.tableBilldetail_Rg.QtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQtyNull() {
                this[this.tableBilldetail_Rg.QtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeterNull() {
                return this.IsNull(this.tableBilldetail_Rg.MeterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeterNull() {
                this[this.tableBilldetail_Rg.MeterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableBilldetail_Rg.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableBilldetail_Rg.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamtNull() {
                return this.IsNull(this.tableBilldetail_Rg.amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamtNull() {
                this[this.tableBilldetail_Rg.amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisrgNull() {
                return this.IsNull(this.tableBilldetail_Rg.isrgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisrgNull() {
                this[this.tableBilldetail_Rg.isrgColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class rgdetailRow : global::System.Data.DataRow {
            
            private rgdetailDataTable tablergdetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal rgdetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablergdetail = ((rgdetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int isrg {
                get {
                    try {
                        return ((int)(this[this.tablergdetail.isrgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isrg\' in table \'rgdetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablergdetail.isrgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisrgNull() {
                return this.IsNull(this.tablergdetail.isrgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisrgNull() {
                this[this.tablergdetail.isrgColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class cdRow : global::System.Data.DataRow {
            
            private cdDataTable tablecd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal cdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecd = ((cdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string iscd {
                get {
                    try {
                        return ((string)(this[this.tablecd.iscdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'iscd\' in table \'cd\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecd.iscdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiscdNull() {
                return this.IsNull(this.tablecd.iscdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiscdNull() {
                this[this.tablecd.iscdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BilldetailRowChangeEvent : global::System.EventArgs {
            
            private BilldetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BilldetailRowChangeEvent(BilldetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BilldetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class billmasterRowChangeEvent : global::System.EventArgs {
            
            private billmasterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public billmasterRowChangeEvent(billmasterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public billmasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClosingbalanceRowChangeEvent : global::System.EventArgs {
            
            private ClosingbalanceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClosingbalanceRowChangeEvent(ClosingbalanceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClosingbalanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Billdetail1RowChangeEvent : global::System.EventArgs {
            
            private Billdetail1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail1RowChangeEvent(Billdetail1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Billdetail_RgRowChangeEvent : global::System.EventArgs {
            
            private Billdetail_RgRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail_RgRowChangeEvent(Billdetail_RgRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Billdetail_RgRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class rgdetailRowChangeEvent : global::System.EventArgs {
            
            private rgdetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rgdetailRowChangeEvent(rgdetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public rgdetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class cdRowChangeEvent : global::System.EventArgs {
            
            private cdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cdRowChangeEvent(cdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public cdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591